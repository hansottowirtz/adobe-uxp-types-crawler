name: Build and Publish

on: push

jobs:
  build-and-publish:
    name: Build and Publish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install
        run: npm ci
      - name: Build
        run: npx ts-node src/index.ts --entrypoints res/entrypoints.jsonc --templates-path res/templates --out-path packages/photoshop --cache-path tmp/cache
      - name: Set Current Version
        shell: bash -ex {0}
        run: |
          CURRENT_VERSION=$(node -p 'require("./lerna.json").version')
          echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_ENV
      - name: Tag Check
        id: tag_check
        shell: bash -ex {0}
        run: |
          GET_API_URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/git/ref/tags/v${CURRENT_VERSION}"
          http_status_code=$(curl -LI $GET_API_URL -o /dev/null -w '%{http_code}\n' -s \
            -H "Authorization: token ${GITHUB_TOKEN}")
          if [ "$http_status_code" -ne "404" ] ; then
            echo "::set-output name=tag_exists::true"
          else
            echo "::set-output name=tag_exists::false"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Zip typings
        run: |
          shopt -s extglob
          cd packages
          zip ../tmp/types.zip -r .
      - name: Create release
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.tag_check.outputs.tag_exists == 'false' }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.CURRENT_VERSION}}
      - name: Upload release asset
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.tag_check.outputs.tag_exists == 'false' }}
        id: upload_release_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: tmp/types.zip
          asset_name: types.zip
          asset_content_type: application/zip
      - name: Publish
        if: steps.tag_check.outputs.tag_exists == 'false'
        run: npx lerna publish from-package --yes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
